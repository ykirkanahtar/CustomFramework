Û	
QC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\BaseModel.cs
	namespace 	
CustomFramework
 
. 
Data 
{ 
public 

class 
	BaseModel 
< 
TKey 
>  
:! "

IBaseModel# -
<- .
TKey. 2
>2 3
{ 
public		 
TKey		 
Id		 
{		 
get		 
;		 
set		 !
;		! "
}		# $
public

 
DateTime

 
CreateDateTime

 &
{

' (
get

) ,
;

, -
set

. 1
;

1 2
}

3 4
public 
DateTime 
? 
UpdateDateTime '
{( )
get* -
;- .
set/ 2
;2 3
}4 5
public 
DateTime 
? 
DeleteDateTime '
{( )
get* -
;- .
set/ 2
;2 3
}4 5
public 
Status 
Status 
{ 
get "
;" #
set$ '
;' (
}) *
} 
} Ìp
VC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\BaseRepository.cs
	namespace 	
CustomFramework
 
. 
Data 
{ 
public 

class 
BaseRepository 
<  
TEntity  '
,' (
TKey) -
>- .
:/ 0
IRepository1 <
<< =
TEntity= D
,D E
TKeyF J
>J K
where 
TEntity 
: 
	BaseModel $
<$ %
TKey% )
>) *
{ 
private 
readonly 
	DbContext "

_dbContext# -
;- .
private 
readonly 
DbSet 
< 
TEntity &
>& '
_dbSet( .
;. /
private 
bool 
	_disposed 
; 
public 
BaseRepository 
( 
	DbContext '
	dbContext( 1
)1 2
{ 	

_dbContext 
= 
	dbContext "
;" #
_dbSet 
= 

_dbContext 
.  
Set  #
<# $
TEntity$ +
>+ ,
(, -
)- .
;. /
} 	
public 
async 
Task 
< 
TEntity !
>! "
GetByIdAsync# /
(/ 0
TKey0 4
id5 7
)7 8
{ 	
return   
await   

_dbContext   #
.  # $
Set  $ '
<  ' (
TEntity  ( /
>  / 0
(  0 1
)  1 2
.  2 3
	FindAsync  3 <
(  < =
id  = ?
)  ? @
;  @ A
}!! 	
public## 
TEntity## 
GetById## 
(## 
TKey## #
id##$ &
)##& '
{$$ 	
return%% 

_dbContext%% 
.%% 
Set%% !
<%%! "
TEntity%%" )
>%%) *
(%%* +
)%%+ ,
.%%, -
Find%%- 1
(%%1 2
id%%2 4
)%%4 5
;%%5 6
}&& 	
public(( 

IQueryable(( 
<(( 
TEntity(( !
>((! "
Get((# &
(((& '

Expression((' 1
<((1 2
Func((2 6
<((6 7
TEntity((7 >
,((> ?
bool((@ D
>((D E
>((E F
	predicate((G P
)((P Q
{)) 	
return** 
_dbSet** 
.** 
Where** 
(**  
PredicateBuild**  .
(**. /
	predicate**/ 8
)**8 9
)**9 :
;**: ;
}++ 	
public-- 

IQueryable-- 
<-- 
TEntity-- !
>--! "
GetAll--# )
(--) *

Expression.. 
<.. 
Func.. 
<.. 
TEntity.. #
,..# $
bool..% )
>..) *
>..* +
	predicate.., 5
=..6 7
null..8 <
,// 
Func// 
<// 

IQueryable// 
<// 
TEntity// %
>//% &
,//& '
IOrderedQueryable//( 9
<//9 :
TEntity//: A
>//A B
>//B C
orderBy//D K
=//L M
null//N R
)00 	
{11 	

IQueryable22 
<22 
TEntity22 
>22 
query22  %
=22& '
_dbSet22( .
;22. /
query44 
=44 
query44 
.44 
Where44 
(44  
	predicate44  )
!=44* ,
null44- 1
?442 3
PredicateBuild444 B
(44B C
	predicate44C L
)44L M
:44N O
PredicateBuild44P ^
(44^ _
)44_ `
)44` a
;44a b
if66 
(66 
orderBy66 
!=66 
null66 
)66  
{77 
query88 
=88 
orderBy88 
(88  
query88  %
)88% &
;88& '
}99 
return;; 
query;; 
;;; 
}<< 	
public>> 
async>> 
Task>> 
<>> 
ICustomQueryable>> *
<>>* +
TEntity>>+ 2
>>>2 3
>>>3 4!
GetAllWithPagingAsync>>5 J
(>>J K
IPaging?? 
paging?? 
,@@ 

Expression@@ 
<@@ 
Func@@ 
<@@ 
TEntity@@ %
,@@% &
bool@@' +
>@@+ ,
>@@, -
	predicate@@. 7
=@@8 9
null@@: >
,AA 
FuncAA 
<AA 

IQueryableAA 
<AA 
TEntityAA %
>AA% &
,AA& '
IOrderedQueryableAA( 9
<AA9 :
TEntityAA: A
>AAA B
>AAB C
orderByAAD K
=AAL M
nullAAN R
)BB 	
{CC 	

IQueryableDD 
<DD 
TEntityDD 
>DD 
queryDD  %
=DD& '
_dbSetDD( .
;DD. /
queryFF 
=FF 
queryFF 
.FF 
WhereFF 
(FF  
	predicateFF  )
!=FF* ,
nullFF- 1
?FF2 3
PredicateBuildFF4 B
(FFB C
	predicateFFC L
)FFL M
:FFN O
PredicateBuildFFP ^
(FF^ _
)FF_ `
)FF` a
;FFa b
varHH 
rowCountHH 
=HH 
awaitHH  
queryHH! &
.HH& '

CountAsyncHH' 1
(HH1 2
)HH2 3
;HH3 4
ifJJ 
(JJ 
orderByJJ 
!=JJ 
nullJJ 
)JJ  
{KK 
queryLL 
=LL 
orderByLL 
(LL  
queryLL  %
)LL% &
;LL& '
}MM 
queryOO 
=OO 
queryOO 
.OO 
SkipOO 
(OO 
MathOO #
.OO# $
AbsOO$ '
(OO' (
pagingOO( .
.OO. /
	PageIndexOO/ 8
-OO9 :
$numOO; <
)OO< =
*OO> ?
pagingOO@ F
.OOF G
PageSizeOOG O
)OOO P
.OOP Q
TakeOOQ U
(OOU V
pagingOOV \
.OO\ ]
PageSizeOO] e
)OOe f
;OOf g
returnQQ 
newQQ 
CustomQueryableQQ &
<QQ& '
TEntityQQ' .
>QQ. /
{RR 
ResultSS 
=SS 
querySS 
,SS 
CountTT 
=TT 
rowCountTT  
,TT  !
}UU 
;UU 
}VV 	
publicXX 
ICustomQueryableXX 
<XX  
TEntityXX  '
>XX' (
GetAllWithPagingXX) 9
(XX9 :
IPagingYY 
pagingYY 
,ZZ 

ExpressionZZ 
<ZZ 
FuncZZ 
<ZZ 
TEntityZZ %
,ZZ% &
boolZZ' +
>ZZ+ ,
>ZZ, -
	predicateZZ. 7
=ZZ8 9
nullZZ: >
,[[ 
Func[[ 
<[[ 

IQueryable[[ 
<[[ 
TEntity[[ %
>[[% &
,[[& '
IOrderedQueryable[[( 9
<[[9 :
TEntity[[: A
>[[A B
>[[B C
orderBy[[D K
=[[L M
null[[N R
)\\ 	
{]] 	

IQueryable^^ 
<^^ 
TEntity^^ 
>^^ 
query^^  %
=^^& '
_dbSet^^( .
;^^. /
query`` 
=`` 
query`` 
.`` 
Where`` 
(``  
	predicate``  )
!=``* ,
null``- 1
?``2 3
PredicateBuild``4 B
(``B C
	predicate``C L
)``L M
:``N O
PredicateBuild``P ^
(``^ _
)``_ `
)``` a
;``a b
varbb 
rowCountbb 
=bb 
querybb  
.bb  !
Countbb! &
(bb& '
)bb' (
;bb( )
ifdd 
(dd 
orderBydd 
!=dd 
nulldd 
)dd  
{ee 
queryff 
=ff 
orderByff 
(ff  
queryff  %
)ff% &
;ff& '
}gg 
queryii 
=ii 
queryii 
.ii 
Skipii 
(ii 
(ii  
pagingii  &
.ii& '
	PageIndexii' 0
-ii1 2
$numii3 4
)ii4 5
*ii6 7
pagingii8 >
.ii> ?
PageSizeii? G
)iiG H
.iiH I
TakeiiI M
(iiM N
pagingiiN T
.iiT U
PageSizeiiU ]
)ii] ^
;ii^ _
returnkk 
newkk 
CustomQueryablekk &
<kk& '
TEntitykk' .
>kk. /
{ll 
Resultmm 
=mm 
querymm 
,mm 
Countnn 
=nn 
rowCountnn  
,nn  !
}oo 
;oo 
}pp 	
publicrr 
voidrr 
Addrr 
(rr 
TEntityrr 
entityrr  &
)rr& '
{ss 	
entitytt 
.tt 
CreateDateTimett !
=tt" #
DateTimett$ ,
.tt, -
Nowtt- 0
;tt0 1
entityuu 
.uu 
Statusuu 
=uu 
Statusuu "
.uu" #
Activeuu# )
;uu) *
_dbSetvv 
.vv 
Addvv 
(vv 
entityvv 
)vv 
;vv 
}ww 	
publicyy 
voidyy 
Updateyy 
(yy 
TEntityyy "
entityyy# )
)yy) *
{zz 	
entity{{ 
.{{ 
UpdateDateTime{{ !
={{" #
DateTime{{$ ,
.{{, -
Now{{- 0
;{{0 1
_dbSet}} 
.}} 
Attach}} 
(}} 
entity}}  
)}}  !
;}}! "

_dbContext~~ 
.~~ 
Entry~~ 
(~~ 
entity~~ #
)~~# $
.~~$ %
State~~% *
=~~+ ,
EntityState~~- 8
.~~8 9
Modified~~9 A
;~~A B
} 	
public
 
void
 
Delete
 
(
 
TEntity
 "
entity
# )
)
) *
{
 	
entity
 
.
 
DeleteDateTime
 !
=
" #
DateTime
$ ,
.
, -
Now
- 0
;
0 1
entity
 
.
 
Status
 
=
 
Status
 "
.
" #
Deleted
# *
;
* +
_dbSet
 
.
 
Attach
 
(
 
entity
  
)
  !
;
! "

_dbContext
 
.
 
Entry
 
(
 
entity
 #
)
# $
.
$ %
State
% *
=
+ ,
EntityState
- 8
.
8 9
Modified
9 A
;
A B
}
 	
~
 	
BaseRepository
	 
(
 
)
 
{
 	
Dispose
 
(
 
false
 
)
 
;
 
}
 	
public
 
void
 
Dispose
 
(
 
)
 
{
 	
Dispose
 
(
 
true
 
)
 
;
 
GC
 
.
 
SuppressFinalize
 
(
  
this
  $
)
$ %
;
% &
}
 	
	protected
 
virtual
 
void
 
Dispose
 &
(
& '
bool
' +
	disposing
, 5
)
5 6
{
 	
if
 
(
 
	disposing
 
&&
 
!
 
	_disposed
 '
)
' (
{
 

_dbContext
 
.
 
Dispose
 "
(
" #
)
# $
;
$ %
}
 
	_disposed
 
=
 
true
 
;
 
}
   	
private
¢¢ 
static
¢¢ 

Expression
¢¢ !
<
¢¢! "
Func
¢¢" &
<
¢¢& '
TEntity
¢¢' .
,
¢¢. /
bool
¢¢0 4
>
¢¢4 5
>
¢¢5 6
PredicateBuild
¢¢7 E
(
¢¢E F

Expression
¢¢F P
<
¢¢P Q
Func
¢¢Q U
<
¢¢U V
TEntity
¢¢V ]
,
¢¢] ^
bool
¢¢_ c
>
¢¢c d
>
¢¢d e
	predicate
¢¢f o
)
¢¢o p
{
££ 	
return
¤¤ 
	predicate
¤¤ 
.
¤¤ 
And
¤¤  
(
¤¤  !
p
¤¤! "
=>
¤¤# %
(
¤¤& '
int
¤¤' *
)
¤¤* +
p
¤¤+ ,
.
¤¤, -
Status
¤¤- 3
==
¤¤4 6
(
¤¤7 8
int
¤¤8 ;
)
¤¤; <
Status
¤¤< B
.
¤¤B C
Active
¤¤C I
)
¤¤I J
;
¤¤J K
}
¥¥ 	
private
§§ 
static
§§ 

Expression
§§ !
<
§§! "
Func
§§" &
<
§§& '
TEntity
§§' .
,
§§. /
bool
§§0 4
>
§§4 5
>
§§5 6
PredicateBuild
§§7 E
(
§§E F
)
§§F G
{
¨¨ 	
var
©© 
	predicate
©© 
=
©© 
PredicateBuilder
©© ,
.
©©, -
New
©©- 0
<
©©0 1
TEntity
©©1 8
>
©©8 9
(
©©9 :
)
©©: ;
;
©©; <
return
ªª 
	predicate
ªª 
.
ªª 
And
ªª  
(
ªª  !
p
ªª! "
=>
ªª# %
(
ªª& '
int
ªª' *
)
ªª* +
p
ªª+ ,
.
ªª, -
Status
ªª- 3
==
ªª4 6
(
ªª7 8
int
ªª8 ;
)
ªª; <
Status
ªª< B
.
ªªB C
Active
ªªC I
)
ªªI J
;
ªªJ K
}
«« 	
}
®® 
}¯¯ ô
\C:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\Contracts\CustomList.cs
	namespace 	
CustomFramework
 
. 
Data 
. 
	Contracts (
{ 
public 

class 

CustomList 
< 
T 
> 
:  
ICustomList! ,
<, -
T- .
>. /
where0 5
T6 7
:8 9
class: ?
{ 
public 
int 
Count 
{ 
get 
; 
set  #
;# $
}% &
public 
IList 
< 
T 
> 

ResultList "
{# $
get% (
;( )
set* -
;- .
}/ 0
}		 
}

 
aC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\Contracts\CustomQueryable.cs
	namespace 	
CustomFramework
 
. 
Data 
. 
	Contracts (
{ 
public 

class 
CustomQueryable  
<  !
T! "
>" #
:$ %
ICustomQueryable& 6
<6 7
T7 8
>8 9
where: ?
T@ A
:B C
classD I
{ 
public 
int 
Count 
{ 
get 
; 
set  #
;# $
}% &
public 

IQueryable 
< 
T 
> 
Result #
{$ %
get& )
;) *
set+ .
;. /
}0 1
}		 
}

 ý
]C:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\Contracts\ICustomList.cs
	namespace 	
CustomFramework
 
. 
Data 
. 
	Contracts (
{ 
public 

	interface 
ICustomList  
<  !
T! "
>" #
where$ )
T* +
:, -
class. 3
{ 
int 
Count 
{ 
get 
; 
set 
; 
} 
IList 
< 
T 
> 

ResultList 
{ 
get !
;! "
set# &
;& '
}( )
}		 
}

 
bC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\Contracts\ICustomQueryable.cs
	namespace 	
CustomFramework
 
. 
Data 
. 
	Contracts (
{ 
public 

	interface 
ICustomQueryable %
<% &
T& '
>' (
where) .
T/ 0
:1 2
class3 8
{ 
int 
Count 
{ 
get 
; 
set 
; 
} 

IQueryable 
< 
T 
> 
Result 
{ 
get "
;" #
set$ '
;' (
}) *
}		 
}

 
TC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\Enums\Status.cs
	namespace 	
CustomFramework
 
. 
Data 
. 
Enums $
{ 
public 

enum 
Status 
{ 
Active 
= 
$num 
, 
Passive 
= 
$num 
, 
Deleted 
= 
$num 
, 
} 
}		 â	
lC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\Extensions\DbContextServiceExtension.cs
	namespace 	
CustomFramework
 
. 
Data 
. 

Extensions )
{ 
public 

static 
class %
DbContextServiceExtension 1
{ 
public 
static 
IServiceCollection (
AddDbContext) 5
<5 6
TContext6 >
>> ?
(? @
this@ D
IServiceCollectionE W
servicesX `
)` a
where		 
TContext		 
:		 
	DbContext		 &
{

 	
services 
. 
	AddScoped 
< 
IUnitOfWork *
,* +

UnitOfWork, 6
<6 7
TContext7 ?
>? @
>@ A
(A B
)B C
;C D
services 
. 
	AddScoped 
< 
	DbContext (
,( )
TContext* 2
>2 3
(3 4
)4 5
;5 6
return 
services 
; 
} 	
} 
} á

sC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\Extensions\PostgreSqlServerServiceExtension.cs
	namespace 	
CustomFramework
 
. 
Data 
. 

Extensions )
{ 
public 

static 
class ,
 PostgreSqlServerServiceExtension 8
{ 
public 
static 
IServiceCollection (
AddPostgreSqlServer) <
<< =
TContext= E
>E F
(F G
thisG K
IServiceCollectionL ^
services_ g
,g h
stringi o
connectionString	p 
)
 
where
 
TContext
 
:
 
	DbContext
 
{		 	
services

 
.

 
AddDbContext

 !
<

! "
TContext

" *
>

* +
(

+ ,
options

, 3
=>

4 6
options 
. 
	UseNpgsql !
(! "
connectionString" 2
)2 3
) 
; 
services 
. 
AddDbContext !
<! "
TContext" *
>* +
(+ ,
), -
;- .
return 
services 
; 
} 	
} 
} ø

lC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\Extensions\SqlServerServiceExtension.cs
	namespace 	
CustomFramework
 
. 
Data 
. 

Extensions )
{ 
public 

static 
class %
SqlServerServiceExtension 1
{ 
public 
static 
IServiceCollection (
AddSqlServer) 5
<5 6
TContext6 >
>> ?
(? @
this@ D
IServiceCollectionE W
servicesX `
,` a
stringb h
connectionStringi y
)y z
where	{ 
TContext
 
:
 
	DbContext
 
{		 	
services

 
.

 
AddDbContext

 !
<

! "
TContext

" *
>

* +
(

+ ,
options

, 3
=>

4 6
{ 
options 
. 
UseSqlServer (
(( )
connectionString) 9
)9 :
;: ;
} 
) 
; 
services 
. 
AddDbContext !
<! "
TContext" *
>* +
(+ ,
), -
;- .
return 
services 
; 
} 	
} 
} ¦
RC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\IBaseModel.cs
	namespace 	
CustomFramework
 
. 
Data 
{ 
public 

	interface 

IBaseModel 
<  
TKey  $
>$ %
{ 
TKey 
Id 
{ 
get 
; 
set 
; 
} 
DateTime		 
CreateDateTime		 
{		  !
get		" %
;		% &
set		' *
;		* +
}		, -
DateTime

 
?

 
UpdateDateTime

  
{

! "
get

# &
;

& '
set

( +
;

+ ,
}

- .
DateTime 
? 
DeleteDateTime  
{! "
get# &
;& '
set( +
;+ ,
}- .
Status 
Status 
{ 
get 
; 
set  
;  !
}" #
} 
} ç
OC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\IPaging.cs
	namespace 	
CustomFramework
 
. 
Data 
{ 
public 

	interface 
IPaging 
{ 
int 
	PageIndex 
{ 
get 
; 
} 
int 
PageSize 
{ 
get 
; 
} 
} 
} Ê
SC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\IRepository.cs
	namespace 	
CustomFramework
 
. 
Data 
{ 
public		 

	interface		 
IRepository		  
<		  !
TEntity		! (
,		( )
in		* ,
TKey		- 1
>		1 2
:		3 4
IDisposable		5 @
where

 
TEntity

 
:

 
	BaseModel

 !
<

! "
TKey

" &
>

& '
{ 
Task 
< 
TEntity 
> 
GetByIdAsync "
(" #
TKey# '
id( *
)* +
;+ ,
TEntity 
GetById 
( 
TKey 
id 
)  
;  !

IQueryable 
< 
TEntity 
> 
Get 
(  

Expression  *
<* +
Func+ /
</ 0
TEntity0 7
,7 8
bool9 =
>= >
>> ?
	predicate@ I
)I J
;J K

IQueryable 
< 
TEntity 
> 
GetAll "
(" #

Expression 
< 
Func 
< 
TEntity #
,# $
bool% )
>) *
>* +
	predicate, 5
=6 7
null8 <
, 
Func 
< 

IQueryable 
< 
TEntity %
>% &
,& '
IOrderedQueryable( 9
<9 :
TEntity: A
>A B
>B C
orderByD K
=L M
nullN R
) 	
;	 

Task 
< 
ICustomQueryable 
< 
TEntity %
>% &
>& '!
GetAllWithPagingAsync( =
(= >
IPaging 
paging 
, 

Expression 
< 
Func 
< 
TEntity %
,% &
bool' +
>+ ,
>, -
	predicate. 7
=8 9
null: >
, 
Func 
< 

IQueryable 
< 
TEntity %
>% &
,& '
IOrderedQueryable( 9
<9 :
TEntity: A
>A B
>B C
orderByD K
=L M
nullN R
) 	
;	 

ICustomQueryable 
< 
TEntity  
>  !
GetAllWithPaging" 2
(2 3
IPaging 
paging 
, 

Expression 
< 
Func 
< 
TEntity %
,% &
bool' +
>+ ,
>, -
	predicate. 7
=8 9
null: >
,   
Func   
<   

IQueryable   
<   
TEntity   %
>  % &
,  & '
IOrderedQueryable  ( 9
<  9 :
TEntity  : A
>  A B
>  B C
orderBy  D K
=  L M
null  N R
)!! 	
;!!	 

void## 
Add## 
(## 
TEntity## 
entity## 
)##  
;##  !
void$$ 
Update$$ 
($$ 
TEntity$$ 
entity$$ "
)$$" #
;$$# $
void%% 
Delete%% 
(%% 
TEntity%% 
entity%% "
)%%" #
;%%# $
}&& 
}'' ¹
ZC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\IRepositoryFactory.cs
	namespace 	
CustomFramework
 
. 
Data 
{ 
public 

	interface 
IRepositoryFactory '
{ 
IRepository 
< 
TEntity 
, 
TKey  
>  !
GetRepository" /
</ 0
TEntity0 7
,7 8
TKey9 =
>= >
(> ?
)? @
whereA F
TEntityG N
:O P
	BaseModelQ Z
<Z [
TKey[ _
>_ `
;` a
} 
} Á
SC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\IUnitOfWork.cs
	namespace 	
CustomFramework
 
. 
Data 
{ 
public 

	interface 
IUnitOfWork  
:! "
IDisposable# .
{ 
IRepository		 
<		 
TEntity		 
,		 
TKey		  
>		  !
GetRepository		" /
<		/ 0
TEntity		0 7
,		7 8
TKey		9 =
>		= >
(		> ?
)		? @
where		A F
TEntity		G N
:		O P
	BaseModel		Q Z
<		Z [
TKey		[ _
>		_ `
;		` a
int 
SaveChanges 
( 
) 
; 
Task 
< 
int 
> 
SaveChangesAsync "
(" #
)# $
;$ %
int 
ExecuteSqlCommand 
( 
string $
sql% (
,( )
params* 0
object1 7
[7 8
]8 9

parameters: D
)D E
;E F

IQueryable 
< 
TEntity 
> 
FromSql #
<# $
TEntity$ +
>+ ,
(, -
string- 3
sql4 7
,7 8
params9 ?
object@ F
[F G
]G H

parametersI S
)S T
whereU Z
TEntity[ b
:c d
classe j
;j k
} 
} ¾
VC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\IUnitOfWorkOfT.cs
	namespace 	
CustomFramework
 
. 
Data 
{ 
public 

	interface 
IUnitOfWork  
<  !
out! $
TContext% -
>- .
:/ 0
IUnitOfWork1 <
where= B
TContextC K
:L M
	DbContextN W
{ 
TContext		 
	DbContext		 
{		 
get		  
;		  !
}		" #
Task 
< 
int 
> 
SaveChangesAsync "
(" #
params# )
IUnitOfWork* 5
[5 6
]6 7
unitOfWorks8 C
)C D
;D E
} 
} 
qC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\ModelConfiguration\BaseModelConfiguration.cs
	namespace 	
CustomFramework
 
. 
Data 
. 
ModelConfiguration 1
{ 
public 

class "
BaseModelConfiguration '
<' (
TEntity( /
,/ 0
TKey1 5
>5 6
:7 8$
IEntityTypeConfiguration9 Q
<Q R
TEntityR Y
>Y Z
where 
TEntity 
: 
class 
, 

IBaseModel )
<) *
TKey* .
>. /
where0 5
TKey6 :
:; <
struct= C
{ 
public		 
virtual		 
void		 
	Configure		 %
(		% &
EntityTypeBuilder		& 7
<		7 8
TEntity		8 ?
>		? @
builder		A H
)		H I
{

 	
builder 
. 
Property 
( 
p 
=> !
p" #
.# $
Id$ &
)& '
.' (&
UseSqlServerIdentityColumn( B
(B C
)C D
;D E
builder 
. 
Property 
( 
p 
=> !
p" #
.# $
CreateDateTime$ 2
)2 3
. 

IsRequired 
( 
) 
; 
builder 
. 
Property 
( 
p 
=> !
p" #
.# $
UpdateDateTime$ 2
)2 3
;3 4
builder 
. 
Property 
( 
p 
=> !
p" #
.# $
DeleteDateTime$ 2
)2 3
;3 4
builder 
. 
Property 
( 
p 
=> !
p" #
.# $
Status$ *
)* +
. 

IsRequired 
( 
) 
; 
} 	
} 
} 
NC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\Paging.cs
	namespace 	
CustomFramework
 
. 
Data 
{ 
public 

class 
Paging 
: 
IPaging !
{ 
public 
Paging 
( 
int 
	pageIndex #
,# $
int% (
pageSize) 1
)1 2
{ 	
	PageIndex 
= 
	pageIndex !
;! "
PageSize 
= 
pageSize 
;  
}		 	
public 
int 
	PageIndex 
{ 
get "
;" #
}$ %
public 
int 
PageSize 
{ 
get !
;! "
}# $
} 
} ¥=
RC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\UnitOfWork.cs
	namespace		 	
CustomFramework		
 
.		 
Data		 
{

 
public 

class 

UnitOfWork 
< 
TContext $
>$ %
:& '
IRepositoryFactory( :
,: ;
IUnitOfWork< G
<G H
TContextH P
>P Q
whereR W
TContextX `
:a b
	DbContextc l
{ 
private 
bool 
	_disposed 
; 
private 

Dictionary 
< 
Type 
,  
object! '
>' (
_repositories) 6
;6 7
public 

UnitOfWork 
( 
TContext "
context# *
)* +
{ 	
	DbContext 
= 
context 
??  "
throw# (
new) ,!
ArgumentNullException- B
(B C
nameofC I
(I J
contextJ Q
)Q R
)R S
;S T
} 	
public 
TContext 
	DbContext !
{" #
get$ '
;' (
}) *
public 
IRepository 
< 
TEntity "
," #
TKey$ (
>( )
GetRepository* 7
<7 8
TEntity8 ?
,? @
TKeyA E
>E F
(F G
)G H
whereI N
TEntityO V
:W X
	BaseModelY b
<b c
TKeyc g
>g h
{ 	
if 
( 
_repositories 
==  
null! %
)% &
{ 
_repositories 
= 
new  #

Dictionary$ .
<. /
Type/ 3
,3 4
object5 ;
>; <
(< =
)= >
;> ?
} 
var 
type 
= 
typeof 
( 
TEntity %
)% &
;& '
if 
( 
! 
_repositories 
. 
ContainsKey *
(* +
type+ /
)/ 0
)0 1
{   
_repositories!! 
[!! 
type!! "
]!!" #
=!!$ %
new!!& )
BaseRepository!!* 8
<!!8 9
TEntity!!9 @
,!!@ A
TKey!!B F
>!!F G
(!!G H
	DbContext!!H Q
)!!Q R
;!!R S
}"" 
return$$ 
($$ 
IRepository$$ 
<$$  
TEntity$$  '
,$$' (
TKey$$) -
>$$- .
)$$. /
_repositories$$/ <
[$$< =
type$$= A
]$$A B
;$$B C
}%% 	
public'' 
int'' 
ExecuteSqlCommand'' $
(''$ %
string''% +
sql'', /
,''/ 0
params''1 7
object''8 >
[''> ?
]''? @

parameters''A K
)''K L
=>''M O
	DbContext''P Y
.''Y Z
Database''Z b
.''b c
ExecuteSqlCommand''c t
(''t u
sql''u x
,''x y

parameters	''z 
)
'' 
;
'' 
public)) 

IQueryable)) 
<)) 
TEntity)) !
>))! "
FromSql))# *
<))* +
TEntity))+ 2
>))2 3
())3 4
string))4 :
sql)); >
,))> ?
params))@ F
object))G M
[))M N
]))N O

parameters))P Z
)))Z [
where))\ a
TEntity))b i
:))j k
class))l q
=>))r t
	DbContext))u ~
.))~ 
Set	)) 
<
)) 
TEntity
)) 
>
)) 
(
)) 
)
)) 
.
)) 
FromSql
)) 
(
)) 
sql
)) 
,
)) 

parameters
)) ¥
)
))¥ ¦
;
))¦ §
public++ 
int++ 
SaveChanges++ 
(++ 
)++  
{,, 	
return-- 
	DbContext-- 
.-- 
SaveChanges-- (
(--( )
)--) *
;--* +
}.. 	
public00 
async00 
Task00 
<00 
int00 
>00 
SaveChangesAsync00 /
(00/ 0
)000 1
{11 	
return22 
await22 
	DbContext22 "
.22" #
SaveChangesAsync22# 3
(223 4
)224 5
;225 6
}33 	
public55 
async55 
Task55 
<55 
int55 
>55 
SaveChangesAsync55 /
(55/ 0
params550 6
IUnitOfWork557 B
[55B C
]55C D
unitOfWorks55E P
)55P Q
{66 	
using88 
(88 
var88 
transaction88 "
=88# $
	DbContext88% .
.88. /
Database88/ 7
.887 8
BeginTransaction888 H
(88H I
)88I J
)88J K
{99 
try:: 
{;; 
var<< 
count<< 
=<< 
$num<<  !
;<<! "
foreach== 
(== 
var==  

unitOfWork==! +
in==, .
unitOfWorks==/ :
)==: ;
{>> 
if?? 
(?? 
!?? 
(?? 

unitOfWork?? (
is??) +

UnitOfWork??, 6
<??6 7
	DbContext??7 @
>??@ A
uow??B E
)??E F
)??F G
continue??H P
;??P Q
uow@@ 
.@@ 
	DbContext@@ %
.@@% &
Database@@& .
.@@. /
UseTransaction@@/ =
(@@= >
transaction@@> I
.@@I J
GetDbTransaction@@J Z
(@@Z [
)@@[ \
)@@\ ]
;@@] ^
countAA 
+=AA  
awaitAA! &
uowAA' *
.AA* +
SaveChangesAsyncAA+ ;
(AA; <
)AA< =
;AA= >
}BB 
countDD 
+=DD 
awaitDD "
SaveChangesAsyncDD# 3
(DD3 4
)DD4 5
;DD5 6
transactionFF 
.FF  
CommitFF  &
(FF& '
)FF' (
;FF( )
returnHH 
countHH  
;HH  !
}II 
catchJJ 
(JJ 
	ExceptionJJ  
)JJ  !
{KK 
transactionMM 
.MM  
RollbackMM  (
(MM( )
)MM) *
;MM* +
throwOO 
;OO 
}PP 
}QQ 
}RR 	
publicTT 
voidTT 
DisposeTT 
(TT 
)TT 
{UU 	
DisposeVV 
(VV 
trueVV 
)VV 
;VV 
GCXX 
.XX 
SuppressFinalizeXX 
(XX  
thisXX  $
)XX$ %
;XX% &
}YY 	
	protected[[ 
virtual[[ 
void[[ 
Dispose[[ &
([[& '
bool[[' +
	disposing[[, 5
)[[5 6
{\\ 	
if]] 
(]] 
!]] 
	_disposed]] 
&&]] 
	disposing]] '
)]]' (
{^^ 
_repositories`` 
?`` 
.`` 
Clear`` $
(``$ %
)``% &
;``& '
	DbContextcc 
.cc 
Disposecc !
(cc! "
)cc" #
;cc# $
}dd 
	_disposedff 
=ff 
trueff 
;ff 
}gg 	
}hh 
}jj Ü
aC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\Utils\CustomListConverter.cs
	namespace 	
CustomFramework
 
. 
Data 
. 
Utils $
{ 
public		 

static		 
class		 
CustomListConverter		 +
{

 
public 
static 
async 
Task  
<  !
ICustomList! ,
<, -
T- .
>. /
>/ 0
ToCustomList1 =
<= >
T> ?
>? @
(@ A
thisA E
ICustomQueryableF V
<V W
TW X
>X Y
queryZ _
)_ `
where 
T 
: 
class 
{ 	
return 
new 

CustomList !
<! "
T" #
># $
{ 

ResultList 
= 
await "
query# (
.( )
Result) /
./ 0
ToListAsync0 ;
(; <
)< =
,= >
Count 
= 
query 
. 
Count #
,# $
} 
; 
} 	
public 
static 
async 
Task  
<  !
ICustomList! ,
<, -
T- .
>. /
>/ 0
ToCustomList1 =
<= >
T> ?
>? @
(@ A
thisA E

IQueryableF P
<P Q
TQ R
>R S
resultT Z
)Z [
where\ a
Tb c
:d e
classf k
{ 	
var 
list 
= 
await 
result #
.# $
ToListAsync$ /
(/ 0
)0 1
;1 2
return 
new 

CustomList !
<! "
T" #
># $
{ 
Count 
= 
list 
. 
Count "
," #

ResultList 
= 
list !
} 
; 
} 	
} 
} ·
XC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\Utils\HashString.cs
	namespace 	
CustomFramework
 
. 
Data 
. 
Utils $
{ 
public 

static 
class 

HashString "
{ 
public		 
static		 
string		 
GetSalt		 $
(		$ %
)		% &
{

 	
var 
salt 
= 
new 
byte 
[  
$num  #
/$ %
$num& '
]' (
;( )
using 
( 
var 
rng 
= !
RandomNumberGenerator 2
.2 3
Create3 9
(9 :
): ;
); <
{ 
rng 
. 
GetBytes 
( 
salt !
)! "
;" #
} 
return 
Convert 
. 
ToBase64String )
() *
salt* .
). /
;/ 0
} 	
public 
static 
string 
Hash !
(! "
string" (
value) .
,. /
string0 6
salt7 ;
,; <
int= @
iterationCountA O
)O P
{ 	
var 
hashed 
= 
Convert  
.  !
ToBase64String! /
(/ 0
Pbkdf20 6
(6 7
password 
: 
value 
,  
salt 
: 
Encoding 
. 
ASCII $
.$ %
GetBytes% -
(- .
salt. 2
)2 3
,3 4

iterations 
: 
iterationCount *
,* +
outputBytes 
: 
$num  
/! "
$num# $
)$ %
)% &
;& '
return 
hashed 
; 
} 	
private 
static 
byte 
[ 
] 
Pbkdf2 $
($ %
string% +
password, 4
,4 5
byte6 :
[: ;
]; <
salt= A
,A B
intC F

iterationsG Q
,Q R
intS V
outputBytesW b
)b c
{ 	
var   
pbkdf2   
=   
new   
Rfc2898DeriveBytes   /
(  / 0
password  0 8
,  8 9
salt  : >
)  > ?
{  @ A
IterationCount  B P
=  Q R

iterations  S ]
}  ^ _
;  _ `
return!! 
pbkdf2!! 
.!! 
GetBytes!! "
(!!" #
outputBytes!!# .
)!!. /
;!!/ 0
}"" 	
}## 
}%% Ï
\C:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\Utils\IncludeWrapper.cs
	namespace 	
CustomFramework
 
. 
Data 
. 
Utils $
{ 
public		 

static		 
class		 
IncludeWrapper		 &
{

 
public 
static 
ICustomQueryable &
<& '
T' (
>( )
IncludeMultiple* 9
<9 :
T: ;
>; <
(< =
this= A
ICustomQueryableB R
<R S
TS T
>T U
queryV [
,[ \
params] c

Expressiond n
<n o
Funco s
<s t
Tt u
,u v
objectw }
>} ~
>~ 
[	 
]
 
includes
 
)
 
where 
T 
: 
class 
{ 	
if 
( 
includes 
!= 
null  
)  !
{ 
query 
. 
Result 
= 
includes '
.' (
	Aggregate( 1
(1 2
query2 7
.7 8
Result8 >
,> ?
( 
current 
, 
include %
)% &
=>' )
current* 1
.1 2
Include2 9
(9 :
include: A
)A B
)B C
;C D
} 
return 
query 
; 
} 	
public 
static 

IQueryable  
<  !
T! "
>" #
IncludeMultiple$ 3
<3 4
T4 5
>5 6
(6 7
this7 ;

IQueryable< F
<F G
TG H
>H I
queryJ O
,O P
paramsQ W

ExpressionX b
<b c
Funcc g
<g h
Th i
,i j
objectk q
>q r
>r s
[s t
]t u
includesv ~
)~ 
where 
T 
: 
class 
{ 	
if 
( 
includes 
!= 
null  
)  !
{ 
query 
= 
includes  
.  !
	Aggregate! *
(* +
query+ 0
,0 1
( 
current 
, 
include %
)% &
=>' )
current* 1
.1 2
Include2 9
(9 :
include: A
)A B
)B C
;C D
} 
return   
query   
;   
}!! 	
}"" 
}## Î
dC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\Utils\ModelBuilderExtensions.cs
	namespace 	
CustomFramework
 
. 
Data 
. 
Utils $
{ 
public 

static 
class "
ModelBuilderExtensions .
{		 
public

 
static

 
void

 
SetModelToSnakeCase

 .
(

. /
this

/ 3
ModelBuilder

4 @
modelBuilder

A M
)

M N
{ 	
foreach 
( 
var 
entity 
in  "
modelBuilder# /
./ 0
Model0 5
.5 6
GetEntityTypes6 D
(D E
)E F
)F G
{ 
entity 
. 

Relational !
(! "
)" #
.# $
	TableName$ -
=. /
entity0 6
.6 7

Relational7 A
(A B
)B C
.C D
	TableNameD M
.M N
ToSnakeCaseN Y
(Y Z
)Z [
;[ \
foreach 
( 
var 
property %
in& (
entity) /
./ 0
GetProperties0 =
(= >
)> ?
)? @
{ 
property 
. 

Relational '
(' (
)( )
.) *

ColumnName* 4
=5 6
property7 ?
.? @
Name@ D
.D E
ToSnakeCaseE P
(P Q
)Q R
;R S
} 
foreach 
( 
var 
key  
in! #
entity$ *
.* +
GetKeys+ 2
(2 3
)3 4
)4 5
{ 
key 
. 

Relational "
(" #
)# $
.$ %
Name% )
=* +
key, /
./ 0

Relational0 :
(: ;
); <
.< =
Name= A
.A B
ToSnakeCaseB M
(M N
)N O
;O P
} 
foreach 
( 
var 
key  
in! #
entity$ *
.* +
GetForeignKeys+ 9
(9 :
): ;
); <
{ 
key 
. 

Relational "
(" #
)# $
.$ %
Name% )
=* +
key, /
./ 0

Relational0 :
(: ;
); <
.< =
Name= A
.A B
ToSnakeCaseB M
(M N
)N O
;O P
} 
foreach 
( 
var 
index "
in# %
entity& ,
., -

GetIndexes- 7
(7 8
)8 9
)9 :
{   
index!! 
.!! 

Relational!! $
(!!$ %
)!!% &
.!!& '
Name!!' +
=!!, -
index!!. 3
.!!3 4

Relational!!4 >
(!!> ?
)!!? @
.!!@ A
Name!!A E
.!!E F
ToSnakeCase!!F Q
(!!Q R
)!!R S
;!!S T
}"" 
}## 
}$$ 	
}%% 
}&& é2
aC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\Utils\QueryableExtensions.cs
	namespace

 	
CustomFramework


 
.

 
Data

 
.

 
Utils

 $
{ 
public 

static 
class 
QueryableExtensions +
{ 
private 
static 
readonly 
TypeInfo  (!
QueryCompilerTypeInfo) >
=? @
typeofA G
(G H
QueryCompilerH U
)U V
.V W
GetTypeInfoW b
(b c
)c d
;d e
private 
static 
readonly 
	FieldInfo  )
QueryCompilerField* <
== >
typeof? E
(E F
EntityQueryProviderF Y
)Y Z
.Z [
GetTypeInfo[ f
(f g
)g h
.h i
DeclaredFieldsi w
. 
First 
( 
x 
=> 
x 
. 
Name 
== !
$str" 2
)2 3
;3 4
private 
static 
readonly 
PropertyInfo  ,!
NodeTypeProviderField- B
=C D!
QueryCompilerTypeInfo !
.! "
DeclaredProperties" 4
.4 5
Single5 ;
(; <
x< =
=>> @
xA B
.B C
NameC G
==H J
$strK ]
)] ^
;^ _
private 
static 
readonly 

MethodInfo  *#
CreateQueryParserMethod+ B
=C D!
QueryCompilerTypeInfo !
.! "
DeclaredMethods" 1
.1 2
First2 7
(7 8
x8 9
=>: <
x= >
.> ?
Name? C
==D F
$strG Z
)Z [
;[ \
private 
static 
readonly 
	FieldInfo  )
DataBaseField* 7
=8 9!
QueryCompilerTypeInfo !
.! "
DeclaredFields" 0
.0 1
Single1 7
(7 8
x8 9
=>: <
x= >
.> ?
Name? C
==D F
$strG R
)R S
;S T
private 
static 
readonly 
PropertyInfo  ,%
DatabaseDependenciesField- F
=G H
typeof 
( 
Database 
) 
. 
GetTypeInfo (
(( )
)) *
.* +
DeclaredProperties+ =
.= >
Single> D
(D E
xE F
=>G I
xJ K
.K L
NameL P
==Q S
$strT b
)b c
;c d
public   
static   
string   
ToSql   "
<  " #
TEntity  # *
>  * +
(  + ,
this  , 0

IQueryable  1 ;
<  ; <
TEntity  < C
>  C D
query  E J
)  J K
where  L Q
TEntity  R Y
:  Z [
class  \ a
{!! 	
if"" 
("" 
!"" 
("" 
query"" 
is"" 
EntityQueryable"" *
<""* +
TEntity""+ 2
>""2 3
)""3 4
&&""5 7
!""8 9
(""9 :
query"": ?
is""@ B
InternalDbSet""C P
<""P Q
TEntity""Q X
>""X Y
)""Y Z
)""Z [
{## 
throw$$ 
new$$ 
ArgumentException$$ +
($$+ ,
$str$$, ;
)$$; <
;$$< =
}%% 
var'' 
queryCompiler'' 
='' 
(''  !
QueryCompiler''! .
)''. /
QueryCompilerField''/ A
.''A B
GetValue''B J
(''J K
query''K P
.''P Q
Provider''Q Y
)''Y Z
;''Z [
var(( 
nodeTypeProvider((  
=((! "
(((# $
INodeTypeProvider(($ 5
)((5 6!
NodeTypeProviderField((6 K
.((K L
GetValue((L T
(((T U
queryCompiler((U b
)((b c
;((c d
var)) 
parser)) 
=)) 
()) 
IQueryParser)) &
)))& '#
CreateQueryParserMethod))' >
.))> ?
Invoke))? E
())E F
queryCompiler))F S
,))S T
new))U X
object))Y _
[))_ `
]))` a
{))b c
nodeTypeProvider))d t
}))u v
)))v w
;))w x
var** 

queryModel** 
=** 
parser** #
.**# $
GetParsedQuery**$ 2
(**2 3
query**3 8
.**8 9

Expression**9 C
)**C D
;**D E
var++ 
database++ 
=++ 
DataBaseField++ (
.++( )
GetValue++) 1
(++1 2
queryCompiler++2 ?
)++? @
;++@ A
var,,  
databaseDependencies,, $
=,,% &
(,,' ( 
DatabaseDependencies,,( <
),,< =%
DatabaseDependenciesField,,= V
.,,V W
GetValue,,W _
(,,_ `
database,,` h
),,h i
;,,i j
var-- #
queryCompilationContext-- '
=--( ) 
databaseDependencies--* >
.--> ?*
QueryCompilationContextFactory--? ]
.--] ^
Create--^ d
(--d e
false--e j
)--j k
;--k l
var.. 
modelVisitor.. 
=.. 
(..  '
RelationalQueryModelVisitor..  ;
)..; <#
queryCompilationContext..< S
...S T#
CreateQueryModelVisitor..T k
(..k l
)..l m
;..m n
modelVisitor// 
.// 
CreateQueryExecutor// ,
<//, -
TEntity//- 4
>//4 5
(//5 6

queryModel//6 @
)//@ A
;//A B
var00 
sql00 
=00 
modelVisitor00 "
.00" #
Queries00# *
.00* +
First00+ 0
(000 1
)001 2
.002 3
ToString003 ;
(00; <
)00< =
;00= >
return22 
sql22 
;22 
}33 	
}44 
}55 
ZC:\Users\YEK\Documents\Projects\CustomFramework\CustomFramework.Data\Utils\SeedDataUtil.cs
	namespace 	
CustomFramework
 
. 
Data 
. 
Utils $
{ 
public 

static 
class 
SeedDataUtil $
{		 
public

 
static

 
void

 
	SeedTData

 $
<

$ %
T

% &
,

& '
TKey

( ,
>

, -
(

- .
ModelBuilder

. :
modelBuilder

; G
,

G H
IEnumerable

I T
<

T U
T

U V
>

V W
list

X \
)

\ ]
where

^ c
T

d e
:

f g
	BaseModel

h q
<

q r
TKey

r v
>

v w
{ 	
foreach 
( 
var 
item 
in  
list! %
)% &
{ 
SetCommonFields 
<  
T  !
,! "
TKey# '
>' (
(( )
item) -
)- .
;. /
modelBuilder 
. 
Entity #
<# $
T$ %
>% &
(& '
)' (
. 
HasData 
( 
item !
)! "
;" #
} 
} 	
public 
static 
void 
SetCommonFields *
<* +
T+ ,
,, -
TKey. 2
>2 3
(3 4
T4 5
entity6 <
)< =
where> C
TD E
:F G
	BaseModelH Q
<Q R
TKeyR V
>V W
{ 	
entity 
. 
CreateDateTime !
=" #
DateTime$ ,
., -
Now- 0
;0 1
entity 
. 
Status 
= 
Status "
." #
Active# )
;) *
} 	
} 
} 